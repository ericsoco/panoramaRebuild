{"version":3,"sources":["../es6/OffsetAreaChartD3.js"],"names":[],"mappings":"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","file":"OffsetAreaChartD3.js","sourcesContent":["import d3 from 'd3';\nimport { Axis, D3Component } from '../../charts';\n\nexport default class OffsetAreaChartD3 extends D3Component {\n\n  willMount() {\n    let {xAccessor, yAccessor, xScale, yScale, interpolate} = this.props;\n    this.areaGenerator = d3.svg.area()\n      .interpolate(interpolate)\n      .x(d => xScale(xAccessor(d)))\n      .y0(d => yScale(0))\n      .y1(d => yScale(yAccessor(d)));\n  }\n\n  onMount() {\n    super.onMount();\n\n    this.lineLayer = this.base.append('g').classed('offset-area-lines', true);\n\n    this._render();\n  }\n\n  preRender() {\n    let {xScale, yScale, xAccessor, yAccessor, areaChartConfig, interpolate} = this.props;\n\n    var maxHeight = this.height - (this.props.areaChartData.length * this.props.chartSpacing);\n    xScale.range([0, this.width]);\n    yScale.range([maxHeight, 0]);\n\n    this.areaGenerator = d3.svg.area()\n      .interpolate(interpolate)\n      .x(d => xScale(areaChartConfig.xAccessor(d)))\n      .y0(d => yScale(0))\n      .y1(d => yScale(areaChartConfig.yAccessor(d)));\n  }\n\n  areaOffsetTranslation(idx) {\n    let {chartSpacing} = this.props;\n\n    return 'translate(0,' + (chartSpacing * idx) + ')';\n  }\n\n  lineOffsetTranslation(idx) {\n    let {data, chartSpacing, yScale} = this.props;\n    var bottom = yScale(0);\n    const pos = data.length - idx;\n    const y = -chartSpacing * pos;\n    return 'translate(0,' + y + ')';\n  }\n\n  render() {\n    let {data, xAccessor,\n      yAccessor, xScale,\n      yScale, fillColor,\n      fillOpacity, areaChartData,\n      colorPalette, metadataAccessor,\n      chartIdAccessor, selectedChartId,\n      circleRadius, interactive} = this.props;\n\n\n    //\n    // AreaCharts\n    // \n    const area = this.base.selectAll('g.area-container').data(areaChartData);\n\n    // exit\n    area.exit().remove();\n\n    // enter\n    area.enter()\n      .append('g')\n      .attr('class', 'area-container')\n    .append('path')\n      .attr('class', 'area');\n\n    // update\n    area\n      .attr('transform', (d,i) => this.areaOffsetTranslation(i))\n      .classed('selected',  d => chartIdAccessor(d) === selectedChartId ? true : false)\n    .selectAll('path')\n      .attr('d', d => this.areaGenerator(d))\n      .attr('fill', (d,i,j) => {\n        return colorPalette[j % colorPalette.length];\n      });\n\n\n    //\n    // lines\n    //\n    const baseY = yScale(0) + this.props.areaChartData.length * this.props.chartSpacing;\n    const domain = xScale.domain();\n\n    this.lineLayer\n      .attr('transform', 'translate(0, '+ baseY + ')');\n\n    const lines = this.lineLayer.selectAll('g.line-group').data(data);\n\n    // exit\n    lines.exit().remove();\n\n    // enter\n    lines.enter()\n      .append('g')\n        .attr('class', 'line-group')\n      .append('line')\n        .attr('class', 'lifespan');\n\n    // update\n    lines\n      .attr('transform', (d,i) => this.lineOffsetTranslation(i))\n      .classed('selected',  d => chartIdAccessor(d) == selectedChartId ? true : false)\n    .selectAll('line')\n      .attr('x1', d => xScale(\n        Math.max(xAccessor(d, 0), domain[0])\n      ))\n      .attr('x2', d => xScale(\n          Math.min(xAccessor(d, 1), domain[1])\n      ))\n      .attr('y1', 0)\n      .attr('y2', 0)\n      .style('stroke', (d, i) => colorPalette[i % colorPalette.length]);\n\n\n    //\n    // circles\n    // \n    const circles = lines.selectAll('circle')\n      .data(d => metadataAccessor(d));\n\n    // exit\n    circles.exit().remove();\n\n    // enter\n    circles\n      .enter()\n      .append('circle');\n\n    // update\n    circles\n      .attr('cx', d => xScale(\n        Math.max(d, domain[0])\n      ))\n      .attr('cy', 0)\n      .attr('r', circleRadius)\n      .style('fill', (d, i, j) => colorPalette[j % colorPalette.length]);\n  }\n\n  postRender() {}\n}\n"]}